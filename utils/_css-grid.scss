@use "sass:math";
@import '../config/layout';
@import '~sass-mq/mq';

/// Returns value for `grid-template-colums` for a given grid-configuration
@function grid-tmpl-cols($grid-cfg) {
  $cols-num: map-get($grid-cfg, 'cols-num');
  $gutter-width: map-get($grid-cfg, 'gutter-width');
  $col-val: 1fr; // will be updated for fluid gutters
  $gutter-val: $gutter-width; // will be updated for fluid gutters
  // CSS grid not required as we have only a single column
  @if ($cols-num == 1) {
    @return [grid-start col-start] $col-val [col-end grid-end];
  }
  // Fluid gutters
  @if map-get($grid-cfg, 'gutter-type') == 'fluid' {
    $col-width: map-get($grid-cfg, 'col-width');
    $layout-width: $cols-num * $col-width + ($cols-num - 1) * $gutter-width;
    $col-val: math.percentage($col-width / $layout-width);
    $gutter-val: math.percentage($gutter-width / $layout-width);
  }
  @return [grid-start]
    repeat($cols-num - 1, [col-start] $col-val [col-end] $gutter-val)
    [col-start] $col-val [col-end grid-end];
}

/// Inject CSS grid columns for configuration in `$ph-css-grid`.
@mixin inject-css-grid() {
  @each $bp-cfg in $ph-css-grid {
    $bp-name: nth($bp-cfg, 1);
    $grid-cfg: nth($bp-cfg, 2);
    // Default (no breakpoint)
    @if $bp-name == 'default' {
      grid-template-columns: grid-tmpl-cols($grid-cfg);
    }
    // Breakpoint
    @else if map-has-key($mq-breakpoints, $bp-name) {
      @include mq($from: $bp-name) {
        grid-template-columns: grid-tmpl-cols($grid-cfg);
      }
    }
    // Breakpoint invalid
    @else {
      @warn "Breakpoint '#{$bp-name}' is not defined in $mq-breakpoints. Check your configuration in $ph-css-grid, make sure $mq-breakpoints is available or add the breakpoint to $mq-breakpoints.";
    }
  }
}
